knitr::opts_knit$set(root.dir = 'C:/Users/Hp/Desktop/R Programming')

library(ggplot2)
library(cluster)
library(NbClust)
library(dplyr)
library(tidyverse)
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(data.table)
library(ROCR)
library(ineq)
library(InformationValue)

Environment Setup
setwd("C:/Users/Hp/Desktop/R Programming")
getwd()
## [1] "C:/Users/Hp/Desktop/R Programming"
Data Import
LoanData <- read.csv("Thera Bank_Personal_Loan_Dataset.csv", header = TRUE)
head(LoanData)
##   ID Age..in.years. Experience..in.years. Income..in.K.month. ZIP.Code
## 1  1             25                     1                  49    91107
## 2  2             45                    19                  34    90089
## 3  3             39                    15                  11    94720
## 4  4             35                     9                 100    94112
## 5  5             35                     8                  45    91330
## 6  6             37                    13                  29    92121
##   Family.members CCAvg Education Mortgage Personal.Loan Securities.Account
## 1              4   1.6         1        0             0                  1
## 2              3   1.5         1        0             0                  1
## 3              1   1.0         1        0             0                  0
## 4              1   2.7         2        0             0                  0
## 5              4   1.0         2        0             0                  0
## 6              4   0.4         2      155             0                  0
##   CD.Account Online CreditCard
## 1          0      0          0
## 2          0      0          0
## 3          0      0          0
## 4          0      0          0
## 5          0      0          1
## 6          0      1          0
tail(LoanData)
##        ID Age..in.years. Experience..in.years. Income..in.K.month.
## 4995 4995             64                    40                  75
## 4996 4996             29                     3                  40
## 4997 4997             30                     4                  15
## 4998 4998             63                    39                  24
## 4999 4999             65                    40                  49
## 5000 5000             28                     4                  83
##      ZIP.Code Family.members CCAvg Education Mortgage Personal.Loan
## 4995    94588              3   2.0         3        0             0
## 4996    92697              1   1.9         3        0             0
## 4997    92037              4   0.4         1       85             0
## 4998    93023              2   0.3         3        0             0
## 4999    90034              3   0.5         2        0             0
## 5000    92612              3   0.8         1        0             0
##      Securities.Account CD.Account Online CreditCard
## 4995                  0          0      1          0
## 4996                  0          0      1          0
## 4997                  0          0      1          0
## 4998                  0          0      0          0
## 4999                  0          0      1          0
## 5000                  0          0      1          1
Summary, structure and dimension
summary(LoanData)
##        ID       Age..in.years.  Experience..in.years. Income..in.K.month.
##  Min.   :   1   Min.   :23.00   Min.   :-3.0          Min.   :  8.00     
##  1st Qu.:1251   1st Qu.:35.00   1st Qu.:10.0          1st Qu.: 39.00     
##  Median :2500   Median :45.00   Median :20.0          Median : 64.00     
##  Mean   :2500   Mean   :45.34   Mean   :20.1          Mean   : 73.77     
##  3rd Qu.:3750   3rd Qu.:55.00   3rd Qu.:30.0          3rd Qu.: 98.00     
##  Max.   :5000   Max.   :67.00   Max.   :43.0          Max.   :224.00     
##                                                                          
##     ZIP.Code     Family.members      CCAvg          Education    
##  Min.   : 9307   Min.   :1.000   Min.   : 0.000   Min.   :1.000  
##  1st Qu.:91911   1st Qu.:1.000   1st Qu.: 0.700   1st Qu.:1.000  
##  Median :93437   Median :2.000   Median : 1.500   Median :2.000  
##  Mean   :93153   Mean   :2.397   Mean   : 1.938   Mean   :1.881  
##  3rd Qu.:94608   3rd Qu.:3.000   3rd Qu.: 2.500   3rd Qu.:3.000  
##  Max.   :96651   Max.   :4.000   Max.   :10.000   Max.   :3.000  
##                  NA's   :18                                      
##     Mortgage     Personal.Loan   Securities.Account   CD.Account    
##  Min.   :  0.0   Min.   :0.000   Min.   :0.0000     Min.   :0.0000  
##  1st Qu.:  0.0   1st Qu.:0.000   1st Qu.:0.0000     1st Qu.:0.0000  
##  Median :  0.0   Median :0.000   Median :0.0000     Median :0.0000  
##  Mean   : 56.5   Mean   :0.096   Mean   :0.1044     Mean   :0.0604  
##  3rd Qu.:101.0   3rd Qu.:0.000   3rd Qu.:0.0000     3rd Qu.:0.0000  
##  Max.   :635.0   Max.   :1.000   Max.   :1.0000     Max.   :1.0000  
##                                                                     
##      Online         CreditCard   
##  Min.   :0.0000   Min.   :0.000  
##  1st Qu.:0.0000   1st Qu.:0.000  
##  Median :1.0000   Median :0.000  
##  Mean   :0.5968   Mean   :0.294  
##  3rd Qu.:1.0000   3rd Qu.:1.000  
##  Max.   :1.0000   Max.   :1.000  
## 
str(LoanData)
## 'data.frame':    5000 obs. of  14 variables:
##  $ ID                   : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ Age..in.years.       : int  25 45 39 35 35 37 53 50 35 34 ...
##  $ Experience..in.years.: int  1 19 15 9 8 13 27 24 10 9 ...
##  $ Income..in.K.month.  : int  49 34 11 100 45 29 72 22 81 180 ...
##  $ ZIP.Code             : int  91107 90089 94720 94112 91330 92121 91711 93943 90089 93023 ...
##  $ Family.members       : int  4 3 1 1 4 4 2 1 3 1 ...
##  $ CCAvg                : num  1.6 1.5 1 2.7 1 0.4 1.5 0.3 0.6 8.9 ...
##  $ Education            : int  1 1 1 2 2 2 2 3 2 3 ...
##  $ Mortgage             : int  0 0 0 0 0 155 0 0 104 0 ...
##  $ Personal.Loan        : int  0 0 0 0 0 0 0 0 0 1 ...
##  $ Securities.Account   : int  1 1 0 0 0 0 0 0 0 0 ...
##  $ CD.Account           : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ Online               : int  0 0 0 0 0 1 1 0 1 0 ...
##  $ CreditCard           : int  0 0 0 0 1 0 0 1 0 0 ...
dim(LoanData)
## [1] 5000   14
#Renaming Columns & Level for Education
colnames(LoanData) <- c("ID", "Age", "Total Experience", "Income", "Zip", "Family Members", "CCAvg", "Education","Mortgage", "Personal Loan", "Securities Account", "CD Account", "Online", "CreditCard")
levels(LoanData$Education) <- c("Undergrad", "Grad", "AdvProfessional")
Data Pre-processing
colSums(is.na(LoanData))
##                 ID                Age   Total Experience 
##                  0                  0                  0 
##             Income                Zip     Family Members 
##                  0                  0                 18 
##              CCAvg          Education           Mortgage 
##                  0                  0                  0 
##      Personal Loan Securities Account         CD Account 
##                  0                  0                  0 
##             Online         CreditCard 
##                  0                  0
LoanData[is.na(LoanData)] <- 0 
LoanData$`Total Experience`[LoanData$`Total Experience`< 1] <- 0
Factor conversion and removal of insignificant columns
LoanData$`Family Members` <- as.factor(LoanData$`Family Members`)
LoanData$Education <- as.factor(LoanData$Education)
LoanData$`Personal Loan` <- as.factor(LoanData$`Personal Loan`)
LoanData$`Securities Account` <- as.factor(LoanData$`Securities Account`)
LoanData$`CD Account` <- as.factor(LoanData$`CD Account`)
LoanData$Online <- as.factor(LoanData$Online)
LoanData$CreditCard <- as.factor(LoanData$Online)
LoanData$ID <- NULL
LoanData$Zip <- NULL
str(LoanData)
## 'data.frame':    5000 obs. of  12 variables:
##  $ Age               : int  25 45 39 35 35 37 53 50 35 34 ...
##  $ Total Experience  : num  1 19 15 9 8 13 27 24 10 9 ...
##  $ Income            : int  49 34 11 100 45 29 72 22 81 180 ...
##  $ Family Members    : Factor w/ 5 levels "0","1","2","3",..: 5 4 2 2 5 5 3 2 4 2 ...
##  $ CCAvg             : num  1.6 1.5 1 2.7 1 0.4 1.5 0.3 0.6 8.9 ...
##  $ Education         : Factor w/ 3 levels "1","2","3": 1 1 1 2 2 2 2 3 2 3 ...
##  $ Mortgage          : int  0 0 0 0 0 155 0 0 104 0 ...
##  $ Personal Loan     : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 2 ...
##  $ Securities Account: Factor w/ 2 levels "0","1": 2 2 1 1 1 1 1 1 1 1 ...
##  $ CD Account        : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
##  $ Online            : Factor w/ 2 levels "0","1": 1 1 1 1 1 2 2 1 2 1 ...
##  $ CreditCard        : Factor w/ 2 levels "0","1": 1 1 1 1 1 2 2 1 2 1 ...
Exploratory Data Analysis (Univariate)
boxplot(LoanData$Mortgage, horizontal = TRUE, main ="Boxplot of Mortgage")
 
hist(LoanData$Mortgage, xlab = "Mortgage", ylab = "Total Count", main = "Histogram of Mortgage")
 
hist(LoanData$Age, xlab = "Age", ylab = "Total Count", main = "Histogram of Age")
 
hist(LoanData$`Total Experience`, xlab = "Total Experince in Years", ylab = "Total Count", main = "Histogram of Total Work Experience ")
 
qplot(LoanData$`Personal Loan`, xlab = "Personal Loan", ylab = "Total Count",
      main  = "Histogram of Personal Loan", fill = LoanData$`Personal Loan` ) + 
  theme(plot.title = element_text(hjust = 0.5)) + labs(fill='Personal Loan')
 
summary(LoanData$`Personal Loan`)
##    0    1 
## 4520  480
qplot(LoanData$`Family Members`, xlab = "Family Members", ylab = "Total Count",
      main  = "Distribution of Family Members", fill = LoanData$`Family Members` ) + theme(plot.title = element_text(hjust = 0.5)) +  labs(fill='Family Members')
 
qplot(LoanData$Education, xlab = "Levels of Education", ylab = "Total Count", 
      main  = "Distribution of Pop. by Education", fill = LoanData$Education ) + 
  theme(plot.title = element_text(hjust = 0.5)) +  labs(fill='Education')
 
qplot(LoanData$Income, geom = "density", xlab = "Income", ylab = "Pop. Measure",
      main  = "Density graph for Income") +  theme(plot.title = element_text(hjust = 0.5))
 
qplot(LoanData$CCAvg  , geom = "density", xlab = "Credit Card Spending Monthly", ylab = "Pop. Measure", main  = "Density graph for monthly credit card spending") + 
  theme(plot.title = element_text(hjust = 0.5))
 
qplot(LoanData$Mortgage, xlab = "Mortgage", geom = "density",
      ylab = "Popoulation Frequency", main  = "Density graph for monthly credit card spending")+   theme(plot.title = element_text(hjust = 0.5)) 
 
Bivariate Analysis
qplot(LoanData$`Personal Loan`, LoanData$Income, geom = "boxplot")
 
qplot(LoanData$`Securities Account`, LoanData$Income, geom = "boxplot")
 
qplot(LoanData$`CD Account`, LoanData$Income, geom = "boxplot")
 
qplot(LoanData$Online, LoanData$Income, geom = "boxplot")
 
qplot(LoanData$CreditCard, LoanData$Income, geom = "boxplot")
 
qplot(LoanData$Income, fill = LoanData$Education, geom = "density", xlab = "Income",
      main = "Density graph of Income by Education" )
 
qplot(LoanData$Income, fill = LoanData$`Personal Loan`, geom = "density", xlab = "Income",
      main = "Density graph of Income by Personal Loan" ) 
 
qplot(LoanData$Age, LoanData$`Total Experience`, xlab = "Age", ylab = "Total Experience",
      main = "Age V/S Total Experience") + theme(plot.title = element_text(hjust = 0.5)) 
 
qplot(LoanData$Income, LoanData$CCAvg, xlab = "Income", ylab = "Credit Card Monthly Spend", 
      main = "Relationship of Income and Credit Card Spending") +
      theme(plot.title = element_text(hjust = 0.5))
 
qplot(LoanData$Income, LoanData$Mortgage, xlab = "Income", ylab = "Mortgage", 
      main = "Relationship of Income and Mortgage") +
      theme(plot.title = element_text(hjust =   0.5)) 
 
qplot(LoanData$Education, LoanData$Income, geom = "boxplot", xlab = "Education", ylab = "Income",
      main = "Boxplots for education with income as a measure")
 
qplot(Education, Income, data = LoanData, fill = LoanData$`Personal Loan`, geom = "boxplot", 
      xlab = "Education", ylab = "Income", main = "Education v/s Income Boxplot") +
      theme(plot.title = element_text(hjust = 0.5)) + labs(fill='Personal Loan')
 
qplot(LoanData$`Family Members`, LoanData$Income, geom = "boxplot", xlab = "Family Members", 
      ylab = "Income", main = "Family Members v/s Income Boxplot") + 
      theme(plot.title = element_text(hjust = 0.5))
 
qplot(LoanData$`Family Members`, Income, data = LoanData, fill = LoanData$`Personal Loan`, 
      geom = "boxplot", xlab = "Family Members", ylab = "Income",
      main = "Family Members v/s Income Boxplot") +
      theme(plot.title = element_text(hjust = 0.5)) + labs(fill='Personal Loan')
 
scatterplot3d::scatterplot3d(LoanData$Income, LoanData$Mortgage,
                             xlab = "Income", ylab = "Mortgage",
                             main = "3D Scatter plot Income v/s Mortgage")
 
scatterplot3d::scatterplot3d(LoanData$Income, LoanData$CCAvg, xlab = "Income", 
                             ylab = "Credit Card Spending",
                             main = "3D Scatter plot for Income Vs Credit Card Spending")
 
Splitting data into Train and Test sets.
set.seed(1000)
SpL = sample.split(LoanData$`Personal Loan`, SplitRatio = 0.7)
Trainset = subset(LoanData, SpL==T)
Testset = subset(LoanData, SpL==F)
dim(Trainset)
## [1] 3500   12
dim(Testset)
## [1] 1500   12
CART Classification
dim(Trainset)
## [1] 3500   12
sum(Trainset$`Personal Loan` == 1)/nrow(Trainset)*100
## [1] 9.6
sum(Trainset$`Personal Loan` == 0)/nrow(Trainset)*100
## [1] 90.4
CARTtree <- rpart(formula = Trainset$`Personal Loan` ~ . , data = Trainset, method = "class",  minbucket = 3, cp = 0)
CARTtree
## n= 3500 
## 
## node), split, n, loss, yval, (yprob)
##       * denotes terminal node
## 
##    1) root 3500 336 0 (0.904000000 0.096000000)  
##      2) Income< 114.5 2827  57 0 (0.979837283 0.020162717)  
##        4) CCAvg< 2.95 2613  11 0 (0.995790279 0.004209721)  
##          8) Income< 106.5 2530   0 0 (1.000000000 0.000000000) *
##          9) Income>=106.5 83  11 0 (0.867469880 0.132530120)  
##           18) Education=1 39   1 0 (0.974358974 0.025641026) *
##           19) Education=2,3 44  10 0 (0.772727273 0.227272727)  
##             38) Total Experience>=31.5 10   0 0 (1.000000000 0.000000000) *
##             39) Total Experience< 31.5 34  10 0 (0.705882353 0.294117647)  
##               78) Age< 53 31   7 0 (0.774193548 0.225806452)  
##                156) Age< 33.5 14   1 0 (0.928571429 0.071428571) *
##                157) Age>=33.5 17   6 0 (0.647058824 0.352941176)  
##                  314) Age>=36.5 14   3 0 (0.785714286 0.214285714) *
##                  315) Age< 36.5 3   0 1 (0.000000000 1.000000000) *
##               79) Age>=53 3   0 1 (0.000000000 1.000000000) *
##        5) CCAvg>=2.95 214  46 0 (0.785046729 0.214953271)  
##         10) CD Account=0 196  31 0 (0.841836735 0.158163265)  
##           20) Education=1,3 162  19 0 (0.882716049 0.117283951)  
##             40) CCAvg>=3.65 98   6 0 (0.938775510 0.061224490)  
##               80) Income< 98.5 63   1 0 (0.984126984 0.015873016) *
##               81) Income>=98.5 35   5 0 (0.857142857 0.142857143)  
##                162) Income>=104.5 20   0 0 (1.000000000 0.000000000) *
##                163) Income< 104.5 15   5 0 (0.666666667 0.333333333)  
##                  326) CCAvg>=4.85 3   0 0 (1.000000000 0.000000000) *
##                  327) CCAvg< 4.85 12   5 0 (0.583333333 0.416666667)  
##                    654) Age< 41 6   1 0 (0.833333333 0.166666667) *
##                    655) Age>=41 6   2 1 (0.333333333 0.666666667) *
##             41) CCAvg< 3.65 64  13 0 (0.796875000 0.203125000)  
##               82) CCAvg< 3.45 52   7 0 (0.865384615 0.134615385)  
##                164) Total Experience>=3.5 48   5 0 (0.895833333 0.104166667)  
##                  328) Family Members=2 20   0 0 (1.000000000 0.000000000) *
##                  329) Family Members=1,3,4 28   5 0 (0.821428571 0.178571429)  
##                    658) Age< 42.5 18   1 0 (0.944444444 0.055555556) *
##                    659) Age>=42.5 10   4 0 (0.600000000 0.400000000)  
##                     1318) Age>=52.5 5   0 0 (1.000000000 0.000000000) *
##                     1319) Age< 52.5 5   1 1 (0.200000000 0.800000000) *
##                165) Total Experience< 3.5 4   2 0 (0.500000000 0.500000000) *
##               83) CCAvg>=3.45 12   6 0 (0.500000000 0.500000000)  
##                166) Age>=46 7   1 0 (0.857142857 0.142857143) *
##                167) Age< 46 5   0 1 (0.000000000 1.000000000) *
##           21) Education=2 34  12 0 (0.647058824 0.352941176)  
##             42) CCAvg< 3.85 27   5 0 (0.814814815 0.185185185)  
##               84) Age>=36.5 22   1 0 (0.954545455 0.045454545) *
##               85) Age< 36.5 5   1 1 (0.200000000 0.800000000) *
##             43) CCAvg>=3.85 7   0 1 (0.000000000 1.000000000) *
##         11) CD Account=1 18   3 1 (0.166666667 0.833333333)  
##           22) Family Members=2 3   1 0 (0.666666667 0.333333333) *
##           23) Family Members=1,3,4 15   1 1 (0.066666667 0.933333333) *
##      3) Income>=114.5 673 279 0 (0.585438336 0.414561664)  
##        6) Education=1 436  47 0 (0.892201835 0.107798165)  
##         12) Family Members=1,2 389   0 0 (1.000000000 0.000000000) *
##         13) Family Members=3,4 47   0 1 (0.000000000 1.000000000) *
##        7) Education=2,3 237   5 1 (0.021097046 0.978902954)  
##         14) Income< 116.5 11   5 1 (0.454545455 0.545454545)  
##           28) CCAvg< 3.6 8   3 0 (0.625000000 0.375000000) *
##           29) CCAvg>=3.6 3   0 1 (0.000000000 1.000000000) *
##         15) Income>=116.5 226   0 1 (0.000000000 1.000000000) *
rpart.plot(CARTtree)
 
Choosing the correct Complexity parameter
printcp(CARTtree)
## 
## Classification tree:
## rpart(formula = Trainset$`Personal Loan` ~ ., data = Trainset, 
##     method = "class", minbucket = 3, cp = 0)
## 
## Variables actually used in tree construction:
## [1] Age              CCAvg            CD Account       Education       
## [5] Family Members   Income           Total Experience
## 
## Root node error: 336/3500 = 0.096
## 
## n= 3500 
## 
##           CP nsplit rel error  xerror     xstd
## 1  0.3377976      0  1.000000 1.00000 0.051870
## 2  0.1398810      2  0.324405 0.38690 0.033298
## 3  0.0178571      3  0.184524 0.24702 0.026791
## 4  0.0104167      5  0.148810 0.18155 0.023041
## 5  0.0089286      7  0.127976 0.16071 0.021701
## 6  0.0049603      8  0.119048 0.16667 0.022093
## 7  0.0029762     11  0.104167 0.17262 0.022477
## 8  0.0022321     14  0.095238 0.17560 0.022667
## 9  0.0014881     24  0.068452 0.17560 0.022667
## 10 0.0000000     28  0.062500 0.17857 0.022855
plotcp(CARTtree)
 
Pruning Tree and Plotting pruned tree
PrunedTree <- prune(CARTtree, cp = 0.0090, "CP" )
PrunedTree
## n= 3500 
## 
## node), split, n, loss, yval, (yprob)
##       * denotes terminal node
## 
##  1) root 3500 336 0 (0.904000000 0.096000000)  
##    2) Income< 114.5 2827  57 0 (0.979837283 0.020162717)  
##      4) CCAvg< 2.95 2613  11 0 (0.995790279 0.004209721) *
##      5) CCAvg>=2.95 214  46 0 (0.785046729 0.214953271)  
##       10) CD Account=0 196  31 0 (0.841836735 0.158163265)  
##         20) Education=1,3 162  19 0 (0.882716049 0.117283951) *
##         21) Education=2 34  12 0 (0.647058824 0.352941176)  
##           42) CCAvg< 3.85 27   5 0 (0.814814815 0.185185185) *
##           43) CCAvg>=3.85 7   0 1 (0.000000000 1.000000000) *
##       11) CD Account=1 18   3 1 (0.166666667 0.833333333) *
##    3) Income>=114.5 673 279 0 (0.585438336 0.414561664)  
##      6) Education=1 436  47 0 (0.892201835 0.107798165)  
##       12) Family Members=1,2 389   0 0 (1.000000000 0.000000000) *
##       13) Family Members=3,4 47   0 1 (0.000000000 1.000000000) *
##      7) Education=2,3 237   5 1 (0.021097046 0.978902954) *
rpart.plot(PrunedTree)
 
printcp(PrunedTree)
## 
## Classification tree:
## rpart(formula = Trainset$`Personal Loan` ~ ., data = Trainset, 
##     method = "class", minbucket = 3, cp = 0)
## 
## Variables actually used in tree construction:
## [1] CCAvg          CD Account     Education      Family Members
## [5] Income        
## 
## Root node error: 336/3500 = 0.096
## 
## n= 3500 
## 
##         CP nsplit rel error  xerror     xstd
## 1 0.337798      0   1.00000 1.00000 0.051870
## 2 0.139881      2   0.32440 0.38690 0.033298
## 3 0.017857      3   0.18452 0.24702 0.026791
## 4 0.010417      5   0.14881 0.18155 0.023041
## 5 0.009000      7   0.12798 0.16071 0.021701
plotcp(PrunedTree)
 
Calling paths to a couple of nodes
path.rpart(PrunedTree, c(5))
## 
##  node number: 5 
##    root
##    Income< 114.5
##    CCAvg>=2.95
path.rpart(PrunedTree, c(7))
## 
##  node number: 7 
##    root
##    Income>=114.5
##    Education=2,3
Prediction on Train data
Trainset$Pred <- predict(PrunedTree, data = Trainset, type = "class")
Trainset$Prob <- predict(PrunedTree, data = Trainset, type = "prob")[,"1"]
head(Trainset)
##   Age Total Experience Income Family Members CCAvg Education Mortgage
## 1  25                1     49              4   1.6         1        0
## 3  39               15     11              1   1.0         1        0
## 4  35                9    100              1   2.7         2        0
## 5  35                8     45              4   1.0         2        0
## 6  37               13     29              4   0.4         2      155
## 8  50               24     22              1   0.3         3        0
##   Personal Loan Securities Account CD Account Online CreditCard Pred
## 1             0                  1          0      0          0    0
## 3             0                  0          0      0          0    0
## 4             0                  0          0      0          0    0
## 5             0                  0          0      0          0    0
## 6             0                  0          0      1          1    0
## 8             0                  0          0      0          0    0
##          Prob
## 1 0.004209721
## 3 0.004209721
## 4 0.004209721
## 5 0.004209721
## 6 0.004209721
## 8 0.004209721
dim(Trainset)
## [1] 3500   14
Confusion Matrix of Traindata on CART Model
M <- table(Trainset$`Personal Loan`, Trainset$Pred)
M
##    
##        0    1
##   0 3156    8
##   1   35  301
ErrorRate <- (M[1,2] + M[2,1])/nrow(Trainset)
ErrorRate*100
## [1] 1.228571
Accuracy <- 1 - ErrorRate
Accuracy*100
## [1] 98.77143
Model Evaluation of Traindata on CART Model (K.S, AUC, Gini & Concordance)
probs <- seq(0,1,length = 11 )
QS <- quantile(Trainset$Prob, probs)
Trainset$Decile <- cut(Trainset$Prob, unique(QS), include.lowest = TRUE)
TrainDT <- data.table(Trainset)
RankTable <- TrainDT[, list(Count= length(`Personal Loan`), LoanTaken = sum(`Personal Loan`== 1), 
                            LoanNotTaken = sum(`Personal Loan`==0)), by = Decile][order(-Decile)] 

RankTable$RRate <- round(RankTable$LoanTaken/RankTable$Count, 4)*100
RankTable$CumLoanTaken <- cumsum(RankTable$LoanTaken)
RankTable$CumLoanNotTaken <- cumsum(RankTable$LoanNotTaken)
RankTable$CumRelResp <- round(RankTable$CumLoanTaken/sum(RankTable$LoanTaken),4)*100
RankTable$CumRelNonResp <- round(RankTable$CumLoanNotTaken/sum(RankTable$LoanNotTaken),4)*100
RankTable$KS <- abs(RankTable$CumRelResp-RankTable$CumRelNonResp)
RankTable
##             Decile Count LoanTaken LoanNotTaken RRate CumLoanTaken
## 1:       (0.117,1]   336       306           30 91.07          306
## 2: (0.00421,0.117]   162        19          143 11.73          325
## 3:     [0,0.00421]  3002        11         2991  0.37          336
##    CumLoanNotTaken CumRelResp CumRelNonResp    KS
## 1:              30      91.07          0.95 90.12
## 2:             173      96.73          5.47 91.26
## 3:            3164     100.00        100.00  0.00
PredObject <- prediction(Trainset$Prob,Trainset$`Personal Loan`)
Perf <- performance(PredObject,"tpr", "fpr")
plot(Perf)
 
KS <- max(Perf@y.values[[1]] - Perf@x.values[[1]])
KS
## [1] 0.9125843
AUC <- performance(PredObject,"auc")
AUC <- as.numeric(AUC@y.values)
AUC
## [1] 0.9822078
Gini <- ineq(Trainset$Prob, "gini")
Gini
## [1] 0.8718316
Concordance(actuals = Trainset$`Personal Loan`, predictedScores = Trainset$Prob)
## $Concordance
## [1] 0.9668499
## 
## $Discordance
## [1] 0.0331501
## 
## $Tied
## [1] -2.081668e-17
## 
## $Pairs
## [1] 1063104
Prediction on Testdata
Testset$Prediction <- predict(PrunedTree, Testset, type = "class")
Testset$Probability <- predict(PrunedTree, Testset, type = "prob")[,-1]
head(Testset)
##    Age Total Experience Income Family Members CCAvg Education Mortgage
## 2   45               19     34              3   1.5         1        0
## 7   53               27     72              2   1.5         2        0
## 10  34                9    180              1   8.9         3        0
## 13  48               23    114              2   3.8         3        0
## 15  67               41    112              1   2.0         1        0
## 16  60               30     22              1   1.5         3        0
##    Personal Loan Securities Account CD Account Online CreditCard
## 2              0                  1          0      0          0
## 7              0                  0          0      1          1
## 10             1                  0          0      0          0
## 13             0                  1          0      0          0
## 15             0                  1          0      0          0
## 16             0                  0          0      1          1
##    Prediction Probability
## 2           0 0.004209721
## 7           0 0.004209721
## 10          1 0.978902954
## 13          0 0.117283951
## 15          0 0.004209721
## 16          0 0.004209721
dim(Testset)
## [1] 1500   14
Confusion matrix of Testdata on CART model
N <- table(Testset$`Personal Loan`,Testset$Prediction)
N
##    
##        0    1
##   0 1352    4
##   1   25  119
ErrorRate1 <- (N[1,2]+N[2,1])/nrow(Testset)
ErrorRate1*100
## [1] 1.933333
Accuracy1 <- 1 - ErrorRate1
Accuracy1*100
## [1] 98.06667
Model Evaluation of Testdata on CART Model (K.S, AUC, Gini & Concordance)
QS1 <- quantile(Testset$Prob,probs)
Testset$Decile <- cut(Testset$Prob, unique(QS1), include.lowest = TRUE)
TestTable <- data.table(Testset)
RankTable1 <- TestTable[, list(Count = length(`Personal Loan`), LoanTaken = sum(`Personal Loan`==1), 
                               LoanNotTaken = sum(`Personal Loan`==0)), by= Decile][order(-Decile)]

RankTable1$RRate <- round(RankTable1$LoanTaken/RankTable1$Count, 4)*100
RankTable1$CumLoanTaken <- cumsum(RankTable1$LoanTaken)
RankTable1$CumLoanNotTaken <- cumsum(RankTable1$LoanNotTaken)
RankTable1$CumRelResp <- round(RankTable1$CumLoanTaken/sum(RankTable1$LoanTaken),4)*100
RankTable1$CumRelNonResp <- round(RankTable1$CumLoanNotTaken/sum(RankTable1$LoanNotTaken),4)*100
RankTable1$KS <- abs(RankTable1$CumRelResp - RankTable1$CumRelNonResp)
RankTable1
##             Decile Count LoanTaken LoanNotTaken RRate CumLoanTaken
## 1:       (0.117,1]   137       124           13 90.51          124
## 2: (0.00421,0.117]    68        16           52 23.53          140
## 3:     [0,0.00421]  1295         4         1291  0.31          144
##    CumLoanNotTaken CumRelResp CumRelNonResp    KS
## 1:              13      86.11          0.96 85.15
## 2:              65      97.22          4.79 92.43
## 3:            1356     100.00        100.00  0.00
PredObject1 <- prediction(Testset$Prob,Testset$`Personal Loan`)
Perf1 <- performance(PredObject1,"tpr", "fpr")
plot(Perf1)
 
KS <- max(Perf1@y.values[[1]] - Perf1@x.values[[1]])
KS
## [1] 0.9242871
AUC <- performance(PredObject1,"auc")
AUC <- as.numeric(AUC@y.values)
AUC
## [1] 0.9834148
Gini <- ineq(Testset$Prob,"gini")
Gini
## [1] 0.8752808
Concordance(actuals = Testset$`Personal Loan`,predictedScores = Testset$Prob)
## $Concordance
## [1] 0.9693594
## 
## $Discordance
## [1] 0.03064057
## 
## $Tied
## [1] 2.428613e-17
## 
## $Pairs
## [1] 195264
Splitting again into Train and Test data
set.seed(1000)
SpL = sample.split(LoanData$`Personal Loan`, SplitRatio = 0.7)
Trainset = subset(LoanData, SpL==T)
Testset = subset(LoanData, SpL==F)
dim(Trainset)
## [1] 3500   12
dim(Testset)
## [1] 1500   12
Applying RandomForrest Model (Supervised Learning)
sum(Trainset$`Personal Loan` == 1)/nrow(Trainset)
## [1] 0.096
sum(Trainset$`Personal Loan`== 0)/nrow(Trainset)
## [1] 0.904
seed = 1000
set.seed(1000)
attach(Trainset)
RForrest <- randomForest(Trainset$`Personal Loan`~., data = Trainset, ntree = 501, mtry = 3, 
                         nodesize = 10, importance = TRUE)
RForrest
## 
## Call:
##  randomForest(formula = Trainset$`Personal Loan` ~ ., data = Trainset,      ntree = 501, mtry = 3, nodesize = 10, importance = TRUE) 
##                Type of random forest: classification
##                      Number of trees: 501
## No. of variables tried at each split: 3
## 
##         OOB estimate of  error rate: 1.17%
## Confusion matrix:
##      0   1  class.error
## 0 3161   3 0.0009481669
## 1   38 298 0.1130952381
plot(RForrest)
 
importance(RForrest)
##                             0          1 MeanDecreaseAccuracy
## Age                 14.275867  1.7785870            14.583877
## Total Experience    14.028801 -0.6638990            13.806735
## Income             102.105805 73.9376967           105.432346
## Family Members      65.757069 33.4564273            65.836065
## CCAvg               29.854541 26.3705165            33.310493
## Education          102.909997 63.1521228           104.179038
## Mortgage            10.918052 -3.2764943             8.960579
## Securities Account   2.633836 -0.9437487             1.578991
## CD Account          12.791974  9.6361970            16.450754
## Online               3.422494  1.5584985             3.995685
## CreditCard           2.216658  0.9219019             2.692080
##                    MeanDecreaseGini
## Age                       14.077506
## Total Experience          12.219985
## Income                   185.681831
## Family Members            63.206394
## CCAvg                     91.812069
## Education                119.071903
## Mortgage                  17.142095
## Securities Account         1.474583
## CD Account                32.056255
## Online                     1.380379
## CreditCard                 1.386793
Tuning RandomForrest Model
set.seed(seed)
TRFOrrest <- tuneRF(x = Trainset[,-8], y = Trainset$`Personal Loan`, mtryStart = 3, nodesize = 10,
                    stepFactor = 1.5, ntreeTry = 77, improve = 0.0001, trace = TRUE,
                    plot = TRUE, doBest = TRUE, importance = TRUE)
## mtry = 3  OOB error = 1.17% 
## Searching left ...
## mtry = 2     OOB error = 1.71% 
## -0.4634146 1e-04 
## Searching right ...
## mtry = 4     OOB error = 1.2% 
## -0.02439024 1e-04
 
TRFOrrest
## 
## Call:
##  randomForest(x = x, y = y, mtry = res[which.min(res[, 2]), 1],      nodesize = 10, importance = TRUE) 
##                Type of random forest: classification
##                      Number of trees: 500
## No. of variables tried at each split: 3
## 
##         OOB estimate of  error rate: 1.17%
## Confusion matrix:
##      0   1  class.error
## 0 3161   3 0.0009481669
## 1   38 298 0.1130952381
Prediction on Traindata using RandomForrest Model
Trainset$PredictionF <- predict(TRFOrrest, Trainset, type = "class" )
Trainset$Probability <- predict(TRFOrrest, Trainset, type = "prob" )[,1]
head(Trainset)
##   Age Total Experience Income Family Members CCAvg Education Mortgage
## 1  25                1     49              4   1.6         1        0
## 3  39               15     11              1   1.0         1        0
## 4  35                9    100              1   2.7         2        0
## 5  35                8     45              4   1.0         2        0
## 6  37               13     29              4   0.4         2      155
## 8  50               24     22              1   0.3         3        0
##   Personal Loan Securities Account CD Account Online CreditCard
## 1             0                  1          0      0          0
## 3             0                  0          0      0          0
## 4             0                  0          0      0          0
## 5             0                  0          0      0          0
## 6             0                  0          0      1          1
## 8             0                  0          0      0          0
##   PredictionF Probability
## 1           0       1.000
## 3           0       1.000
## 4           0       0.992
## 5           0       1.000
## 6           0       1.000
## 8           0       1.000
Confusion Matrix of Traindata on RandomForrest Model
L <- table(Trainset$`Personal Loan`,Trainset$PredictionF)
L
##    
##        0    1
##   0 3163    1
##   1   24  312
ErrorRate3 <- (L[1,2]+L[2,1])/nrow(Trainset)
ErrorRate3*100
## [1] 0.7142857
Accuracy3 <- 1 - ErrorRate3
Accuracy3*100
## [1] 99.28571
Model Evaluation of Traindata on RandomForrest Model (K.S, AUC, Gini & Concordance)
PredObject2 <- prediction(Trainset$Probability,Trainset$`Personal Loan`)
Perf2 <- performance(PredObject2, "fpr", "tpr")
plot(Perf2)
 
KS <- max(Perf2@y.values[[1]]-Perf2@x.values[[1]])
KS
## [1] 0.9883586
ABC <- performance(PredObject2, "auc")
ABC <- as.numeric(ABC@y.values)
AUC <- 1 - ABC
AUC
## [1] 0.9998293
Gini <- ineq(Trainset$Probability,"gini")
Gini <- 1 - Gini
Gini
## [1] 0.9103662
Concordance(actuals = Trainset$`Personal Loan`,predictedScores = Trainset$Probability)
## $Concordance
## [1] 0.0001693155
## 
## $Discordance
## [1] 0.9998307
## 
## $Tied
## [1] 0
## 
## $Pairs
## [1] 1063104
Prediction on Testset using RandomForrest Model
Testset$Pred <- predict(TRFOrrest, Testset, type = "class")
Testset$Prob <- predict(TRFOrrest, Testset, type = "prob")[,-1]
head(Testset)
##    Age Total Experience Income Family Members CCAvg Education Mortgage
## 2   45               19     34              3   1.5         1        0
## 7   53               27     72              2   1.5         2        0
## 10  34                9    180              1   8.9         3        0
## 13  48               23    114              2   3.8         3        0
## 15  67               41    112              1   2.0         1        0
## 16  60               30     22              1   1.5         3        0
##    Personal Loan Securities Account CD Account Online CreditCard Pred
## 2              0                  1          0      0          0    0
## 7              0                  0          0      1          1    0
## 10             1                  0          0      0          0    1
## 13             0                  1          0      0          0    1
## 15             0                  1          0      0          0    0
## 16             0                  0          0      1          1    0
##     Prob
## 2  0.000
## 7  0.000
## 10 0.930
## 13 0.582
## 15 0.018
## 16 0.002
dim(Testset)
## [1] 1500   14
Confusion matrix of Testset on RandomForrest Model
K <- table(Testset$`Personal Loan`,Testset$Pred)
K
##    
##        0    1
##   0 1352    4
##   1   29  115
ErrorRate4 <- (K[1,2]+K[2,1])/nrow(Testset)
ErrorRate4*100
## [1] 2.2
Accuracy4 <- 1 - ErrorRate1
Accuracy4*100
## [1] 98.06667
Model Evaluation of Testset on RandomForrest Model (K.S, AUC, Gini & Concordance)
PredictObject3 <- prediction(Testset$Prob, Testset$`Personal Loan`)
PerfObject3 <- performance(PredictObject3, "tpr", "fpr")
plot(PerfObject3)
 
KS <- max(PerfObject3@y.values[[1]]- PerfObject3@x.values[[1]])
KS
## [1] 0.9672443
AUC <- performance(PredictObject3, "auc")
AUC <- as.numeric(AUC@y.values)
AUC
## [1] 0.9980488
Gini <- ineq(Testset$Prob, "gini")
Gini
## [1] 0.8845964
Concordance(actuals = Testset$`Personal Loan` ,predictedScores = Testset$Prob)
## $Concordance
## [1] 0.9980283
## 
## $Discordance
## [1] 0.00197169
## 
## $Tied
## [1] 2.081668e-17
## 
## $Pairs
## [1] 195264
